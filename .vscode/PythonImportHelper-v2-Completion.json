[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "groupDao",
        "importPath": "groupsss",
        "description": "groupsss",
        "isExtraImport": true,
        "detail": "groupsss",
        "documentation": {}
    },
    {
        "label": "UserDao",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "userblockedDao",
        "importPath": "userblocked",
        "description": "userblocked",
        "isExtraImport": true,
        "detail": "userblocked",
        "documentation": {}
    },
    {
        "label": "usersgroupDao",
        "importPath": "usersgroup",
        "description": "usersgroup",
        "isExtraImport": true,
        "detail": "usersgroup",
        "documentation": {}
    },
    {
        "label": "friendshipsDao",
        "importPath": "friendships",
        "description": "friendships",
        "isExtraImport": true,
        "detail": "friendships",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Controller",
        "kind": 6,
        "importPath": "ControllerUser",
        "description": "ControllerUser",
        "peekOfCode": "class Controller:\n    def __init__(self,host , port):\n        \"\"\"Initialize with the DAO instances.\"\"\"\n        self.host = host\n        self.port = port\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.server_socket.bind((self.host, self.port))\n        print(f\"UDP Server initialized and listening on {self.host}:{self.port}\")\n        try:\n            self.connection = mysql.connector.connect(",
        "detail": "ControllerUser",
        "documentation": {}
    },
    {
        "label": "friendshipsDao",
        "kind": 6,
        "importPath": "friendships",
        "description": "friendships",
        "peekOfCode": "class friendshipsDao:\n    def __init__(self, connection):\n        \"\"\"Initialize the database connection.\"\"\"\n        try:\n            # Load database config from JSON file\n            # 3with open(\"config.json\") as config_file:\n            #    config = json.load(config_file)\n            self.connection = connection\n            if self.connection.is_connected():\n                print(\"Connected to MySQL database\")",
        "detail": "friendships",
        "documentation": {}
    },
    {
        "label": "groupDao",
        "kind": 6,
        "importPath": "groupsss",
        "description": "groupsss",
        "peekOfCode": "class groupDao:\n    def __init__(self, connection):\n        \"\"\"Initialize the database connection.\"\"\"\n        try:\n            # Load database config from JSON file\n            # 3with open(\"config.json\") as config_file:\n            #    config = json.load(config_file)\n            self.connection = connection\n            if self.connection.is_connected():\n                print(\"Connected to MySQL database\")",
        "detail": "groupsss",
        "documentation": {}
    },
    {
        "label": "UserDao",
        "kind": 6,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "class UserDao:\n    def __init__(self, connection):\n        \"\"\"Initialize the database connection.\"\"\"\n        try:\n            # Load database config from JSON file\n            # 3with open(\"config.json\") as config_file:\n            #    config = json.load(config_file)\n            self.connection = connection\n            if self.connection.is_connected():\n                print(\"Connected to MySQL database\")",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "userblockedDao",
        "kind": 6,
        "importPath": "userblocked",
        "description": "userblocked",
        "peekOfCode": "class userblockedDao:\n    def __init__(self, connection):\n        \"\"\"Initialize the database connection.\"\"\"\n        try:\n            # Load database config from JSON file\n            # 3with open(\"config.json\") as config_file:\n            #    config = json.load(config_file)\n            self.connection = connection\n            if self.connection.is_connected():\n                print(\"Connected to MySQL database\")",
        "detail": "userblocked",
        "documentation": {}
    },
    {
        "label": "usersgroupDao",
        "kind": 6,
        "importPath": "usersgroup",
        "description": "usersgroup",
        "peekOfCode": "class usersgroupDao:\n    def __init__(self, connection):\n        \"\"\"Initialize the database connection.\"\"\"\n        try:\n            # Load database config from JSON file\n            # 3with open(\"config.json\") as config_file:\n            #    config = json.load(config_file)\n            self.connection = connection\n            if self.connection.is_connected():\n                print(\"Connected to MySQL database\")",
        "detail": "usersgroup",
        "documentation": {}
    }
]